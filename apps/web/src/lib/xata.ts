// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "experiments",
    columns: [
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Default name",
      },
      { name: "description", type: "text" },
      { name: "sampleSizeAbsolute", type: "int" },
      { name: "sampleSizeRelative", type: "float" },
      { name: "startedAt", type: "datetime" },
      { name: "endedAt", type: "datetime" },
      { name: "variantCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "eventCount", type: "int", notNull: true, defaultValue: "0" },
      { name: "workspace", type: "link", link: { table: "workspaces" } },
      { name: "creator", type: "link", link: { table: "nextauth_users" } },
    ],
    revLinks: [
      { column: "experiment", table: "variants" },
      { column: "experiment", table: "experiment_country_relations" },
      { column: "experiment", table: "events" },
    ],
  },
  {
    name: "variants",
    columns: [
      { name: "experiment", type: "link", link: { table: "experiments" } },
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Default name",
      },
      { name: "subjectCounter", type: "int", notNull: true, defaultValue: "0" },
    ],
    revLinks: [
      { column: "variant", table: "subject_variant_relations" },
      { column: "variant", table: "logs" },
    ],
  },
  {
    name: "subjects",
    columns: [
      { name: "hashedIpAddress", type: "string", unique: true },
      { name: "country", type: "link", link: { table: "countries" } },
    ],
    revLinks: [
      { column: "subject", table: "devices" },
      { column: "subject", table: "subject_variant_relations" },
    ],
  },
  {
    name: "countries",
    columns: [{ name: "name", type: "string", unique: true }],
    revLinks: [
      { column: "country", table: "experiment_country_relations" },
      { column: "country", table: "subjects" },
    ],
  },
  {
    name: "experiment_country_relations",
    columns: [
      { name: "experiment", type: "link", link: { table: "experiments" } },
      { name: "country", type: "link", link: { table: "countries" } },
    ],
  },
  {
    name: "events",
    columns: [
      {
        name: "name",
        type: "string",
        notNull: true,
        defaultValue: "Default name",
      },
      { name: "experiment", type: "link", link: { table: "experiments" } },
      {
        name: "type",
        type: "string",
        notNull: true,
        defaultValue: "Default type",
      },
    ],
    revLinks: [{ column: "event", table: "logs" }],
  },
  {
    name: "logs",
    columns: [
      { name: "event", type: "link", link: { table: "events" } },
      { name: "device", type: "link", link: { table: "devices" } },
      { name: "variant", type: "link", link: { table: "variants" } },
    ],
  },
  {
    name: "browsers",
    columns: [{ name: "name", type: "string", unique: true }],
    revLinks: [{ column: "browser", table: "devices" }],
  },
  {
    name: "operating_systems",
    columns: [{ name: "name", type: "string", unique: true }],
    revLinks: [{ column: "operatingSystem", table: "devices" }],
  },
  {
    name: "devices",
    columns: [
      { name: "subject", type: "link", link: { table: "subjects" } },
      { name: "browser", type: "link", link: { table: "browsers" } },
      {
        name: "operatingSystem",
        type: "link",
        link: { table: "operating_systems" },
      },
    ],
    revLinks: [{ column: "device", table: "logs" }],
  },
  {
    name: "subject_variant_relations",
    columns: [
      { name: "subject", type: "link", link: { table: "subjects" } },
      { name: "variant", type: "link", link: { table: "variants" } },
    ],
  },
  {
    name: "nextauth_users",
    columns: [
      { name: "email", type: "email" },
      { name: "emailVerified", type: "datetime" },
      { name: "name", type: "string" },
      { name: "image", type: "string" },
    ],
    revLinks: [
      { column: "user", table: "nextauth_accounts" },
      { column: "user", table: "nextauth_users_accounts" },
      { column: "user", table: "nextauth_users_sessions" },
      { column: "user", table: "nextauth_sessions" },
      { column: "user", table: "workspace_user_relations" },
      { column: "creator", table: "experiments" },
    ],
  },
  {
    name: "nextauth_accounts",
    columns: [
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "type", type: "string" },
      { name: "provider", type: "string" },
      { name: "providerAccountId", type: "string" },
      { name: "refresh_token", type: "string" },
      { name: "access_token", type: "string" },
      { name: "expires_at", type: "int" },
      { name: "token_type", type: "string" },
      { name: "scope", type: "string" },
      { name: "id_token", type: "text" },
      { name: "session_state", type: "string" },
    ],
    revLinks: [{ column: "account", table: "nextauth_users_accounts" }],
  },
  {
    name: "nextauth_verificationTokens",
    columns: [
      { name: "identifier", type: "string" },
      { name: "token", type: "string" },
      { name: "expires", type: "datetime" },
    ],
  },
  {
    name: "nextauth_users_accounts",
    columns: [
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "account", type: "link", link: { table: "nextauth_accounts" } },
    ],
  },
  {
    name: "nextauth_users_sessions",
    columns: [
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "session", type: "link", link: { table: "nextauth_sessions" } },
    ],
  },
  {
    name: "nextauth_sessions",
    columns: [
      { name: "sessionToken", type: "string" },
      { name: "expires", type: "datetime" },
      { name: "user", type: "link", link: { table: "nextauth_users" } },
    ],
    revLinks: [{ column: "session", table: "nextauth_users_sessions" }],
  },
  {
    name: "workspaces",
    columns: [
      { name: "name", type: "string" },
      { name: "handle", type: "string", unique: true },
    ],
    revLinks: [
      { column: "workspace", table: "workspace_user_relations" },
      { column: "workspace", table: "experiments" },
    ],
  },
  {
    name: "workspace_user_relations",
    columns: [
      { name: "workspace", type: "link", link: { table: "workspaces" } },
      { name: "user", type: "link", link: { table: "nextauth_users" } },
      { name: "isCreator", type: "bool", notNull: true, defaultValue: "false" },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Experiments = InferredTypes["experiments"];
export type ExperimentsRecord = Experiments & XataRecord;

export type Variants = InferredTypes["variants"];
export type VariantsRecord = Variants & XataRecord;

export type Subjects = InferredTypes["subjects"];
export type SubjectsRecord = Subjects & XataRecord;

export type Countries = InferredTypes["countries"];
export type CountriesRecord = Countries & XataRecord;

export type ExperimentCountryRelations =
  InferredTypes["experiment_country_relations"];
export type ExperimentCountryRelationsRecord = ExperimentCountryRelations &
  XataRecord;

export type Events = InferredTypes["events"];
export type EventsRecord = Events & XataRecord;

export type Logs = InferredTypes["logs"];
export type LogsRecord = Logs & XataRecord;

export type Browsers = InferredTypes["browsers"];
export type BrowsersRecord = Browsers & XataRecord;

export type OperatingSystems = InferredTypes["operating_systems"];
export type OperatingSystemsRecord = OperatingSystems & XataRecord;

export type Devices = InferredTypes["devices"];
export type DevicesRecord = Devices & XataRecord;

export type SubjectVariantRelations =
  InferredTypes["subject_variant_relations"];
export type SubjectVariantRelationsRecord = SubjectVariantRelations &
  XataRecord;

export type NextauthUsers = InferredTypes["nextauth_users"];
export type NextauthUsersRecord = NextauthUsers & XataRecord;

export type NextauthAccounts = InferredTypes["nextauth_accounts"];
export type NextauthAccountsRecord = NextauthAccounts & XataRecord;

export type NextauthVerificationTokens =
  InferredTypes["nextauth_verificationTokens"];
export type NextauthVerificationTokensRecord = NextauthVerificationTokens &
  XataRecord;

export type NextauthUsersAccounts = InferredTypes["nextauth_users_accounts"];
export type NextauthUsersAccountsRecord = NextauthUsersAccounts & XataRecord;

export type NextauthUsersSessions = InferredTypes["nextauth_users_sessions"];
export type NextauthUsersSessionsRecord = NextauthUsersSessions & XataRecord;

export type NextauthSessions = InferredTypes["nextauth_sessions"];
export type NextauthSessionsRecord = NextauthSessions & XataRecord;

export type Workspaces = InferredTypes["workspaces"];
export type WorkspacesRecord = Workspaces & XataRecord;

export type WorkspaceUserRelations = InferredTypes["workspace_user_relations"];
export type WorkspaceUserRelationsRecord = WorkspaceUserRelations & XataRecord;

export type DatabaseSchema = {
  experiments: ExperimentsRecord;
  variants: VariantsRecord;
  subjects: SubjectsRecord;
  countries: CountriesRecord;
  experiment_country_relations: ExperimentCountryRelationsRecord;
  events: EventsRecord;
  logs: LogsRecord;
  browsers: BrowsersRecord;
  operating_systems: OperatingSystemsRecord;
  devices: DevicesRecord;
  subject_variant_relations: SubjectVariantRelationsRecord;
  nextauth_users: NextauthUsersRecord;
  nextauth_accounts: NextauthAccountsRecord;
  nextauth_verificationTokens: NextauthVerificationTokensRecord;
  nextauth_users_accounts: NextauthUsersAccountsRecord;
  nextauth_users_sessions: NextauthUsersSessionsRecord;
  nextauth_sessions: NextauthSessionsRecord;
  workspaces: WorkspacesRecord;
  workspace_user_relations: WorkspaceUserRelationsRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL: "https://retest-cv9l0q.us-east-1.xata.sh/db/retest",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
